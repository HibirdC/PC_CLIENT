// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.7.1 by WSRD Tencent.
// Generated from `Tmtp_Biz.jce'
// **********************************************************************

#ifndef __TMTP_BIZ_H_
#define __TMTP_BIZ_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;


namespace Toon
{
    enum MSG_AT_TYPE
    {
        AT_NONE = 0,
        AT_ALL = 1,
        AT_SOME = 2,
    };
    inline string etos(const MSG_AT_TYPE & e)
    {
        switch(e)
        {
            case AT_NONE: return "AT_NONE";
            case AT_ALL: return "AT_ALL";
            case AT_SOME: return "AT_SOME";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, MSG_AT_TYPE & e)
    {
        if(s == "AT_NONE")  { e=AT_NONE; return 0;}
        if(s == "AT_ALL")  { e=AT_ALL; return 0;}
        if(s == "AT_SOME")  { e=AT_SOME; return 0;}

        return -1;
    }

    struct Feed : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.Feed";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        Feed()
        :userId(""),feedId("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(userId, 0);
            _os.write(feedId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(userId, 0, true);
            _is.read(feedId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(userId,"userId");
            _ds.display(feedId,"feedId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(userId, true);
            _ds.displaySimple(feedId, false);
            return _os;
        }
    public:
        std::string userId;
        std::string feedId;
    };
    inline bool operator==(const Feed&l, const Feed&r)
    {
        return l.userId == r.userId && l.feedId == r.feedId;
    }
    inline bool operator!=(const Feed&l, const Feed&r)
    {
        return !(l == r);
    }

    struct BizMsg : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.BizMsg";
        }
        static string MD5()
        {
            return "4d18388656da47e63c89ec2e13afeecd";
        }
        BizMsg()
        :catalogId(0),catalog(""),subCatalog(""),headFlag(0),headFeed(""),finishFlag(0),summary(""),actionType(0),bubbleFlag(0),bizNo(""),showFlag(0),expireTime(0),contentType(0),content(""),subCatalogId(0),appInfo(""),senderName(""),atType(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(catalogId, 0);
            _os.write(catalog, 1);
            _os.write(subCatalog, 2);
            _os.write(headFlag, 3);
            _os.write(headFeed, 4);
            _os.write(finishFlag, 5);
            _os.write(summary, 6);
            _os.write(actionType, 7);
            _os.write(bubbleFlag, 8);
            _os.write(bizNo, 9);
            _os.write(showFlag, 10);
            _os.write(expireTime, 11);
            _os.write(contentType, 12);
            _os.write(content, 13);
            _os.write(subCatalogId, 14);
            _os.write(appInfo, 15);
            _os.write(senderName, 16);
            _os.write(atType, 17);
            _os.write(atFeeds, 18);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(catalogId, 0, false);
            _is.read(catalog, 1, false);
            _is.read(subCatalog, 2, false);
            _is.read(headFlag, 3, false);
            _is.read(headFeed, 4, false);
            _is.read(finishFlag, 5, false);
            _is.read(summary, 6, false);
            _is.read(actionType, 7, false);
            _is.read(bubbleFlag, 8, false);
            _is.read(bizNo, 9, false);
            _is.read(showFlag, 10, false);
            _is.read(expireTime, 11, false);
            _is.read(contentType, 12, false);
            _is.read(content, 13, false);
            _is.read(subCatalogId, 14, false);
            _is.read(appInfo, 15, false);
            _is.read(senderName, 16, false);
            _is.read(atType, 17, false);
            _is.read(atFeeds, 18, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(catalogId,"catalogId");
            _ds.display(catalog,"catalog");
            _ds.display(subCatalog,"subCatalog");
            _ds.display(headFlag,"headFlag");
            _ds.display(headFeed,"headFeed");
            _ds.display(finishFlag,"finishFlag");
            _ds.display(summary,"summary");
            _ds.display(actionType,"actionType");
            _ds.display(bubbleFlag,"bubbleFlag");
            _ds.display(bizNo,"bizNo");
            _ds.display(showFlag,"showFlag");
            _ds.display(expireTime,"expireTime");
            _ds.display(contentType,"contentType");
            _ds.display(content,"content");
            _ds.display(subCatalogId,"subCatalogId");
            _ds.display(appInfo,"appInfo");
            _ds.display(senderName,"senderName");
            _ds.display(atType,"atType");
            _ds.display(atFeeds,"atFeeds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(catalogId, true);
            _ds.displaySimple(catalog, true);
            _ds.displaySimple(subCatalog, true);
            _ds.displaySimple(headFlag, true);
            _ds.displaySimple(headFeed, true);
            _ds.displaySimple(finishFlag, true);
            _ds.displaySimple(summary, true);
            _ds.displaySimple(actionType, true);
            _ds.displaySimple(bubbleFlag, true);
            _ds.displaySimple(bizNo, true);
            _ds.displaySimple(showFlag, true);
            _ds.displaySimple(expireTime, true);
            _ds.displaySimple(contentType, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(subCatalogId, true);
            _ds.displaySimple(appInfo, true);
            _ds.displaySimple(senderName, true);
            _ds.displaySimple(atType, true);
            _ds.displaySimple(atFeeds, false);
            return _os;
        }
    public:
        taf::Int32 catalogId;
        std::string catalog;
        std::string subCatalog;
        taf::Int32 headFlag;
        std::string headFeed;
        taf::Int32 finishFlag;
        std::string summary;
        taf::Int32 actionType;
        taf::Int32 bubbleFlag;
        std::string bizNo;
        taf::Int32 showFlag;
        taf::Int64 expireTime;
        taf::Int32 contentType;
        std::string content;
        taf::Int32 subCatalogId;
        std::string appInfo;
        std::string senderName;
        taf::Int32 atType;
        vector<Toon::Feed> atFeeds;
    };
    inline bool operator==(const BizMsg&l, const BizMsg&r)
    {
        return l.catalogId == r.catalogId && l.catalog == r.catalog && l.subCatalog == r.subCatalog && l.headFlag == r.headFlag && l.headFeed == r.headFeed && l.finishFlag == r.finishFlag && l.summary == r.summary && l.actionType == r.actionType && l.bubbleFlag == r.bubbleFlag && l.bizNo == r.bizNo && l.showFlag == r.showFlag && l.expireTime == r.expireTime && l.contentType == r.contentType && l.content == r.content && l.subCatalogId == r.subCatalogId && l.appInfo == r.appInfo && l.senderName == r.senderName && l.atType == r.atType && l.atFeeds == r.atFeeds;
    }
    inline bool operator!=(const BizMsg&l, const BizMsg&r)
    {
        return !(l == r);
    }

    struct MsgOperate : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.MsgOperate";
        }
        static string MD5()
        {
            return "c4d7e629c0ca65edfd0bf3b3fb53b7d1";
        }
        MsgOperate()
        :catalogId(0),msgId(""),operatorFeedId(""),operatorName(""),exContent("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(catalogId, 0);
            _os.write(msgId, 1);
            _os.write(operatorFeedId, 2);
            _os.write(operatorName, 3);
            _os.write(exContent, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(catalogId, 0, true);
            _is.read(msgId, 1, false);
            _is.read(operatorFeedId, 2, false);
            _is.read(operatorName, 3, false);
            _is.read(exContent, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(catalogId,"catalogId");
            _ds.display(msgId,"msgId");
            _ds.display(operatorFeedId,"operatorFeedId");
            _ds.display(operatorName,"operatorName");
            _ds.display(exContent,"exContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(catalogId, true);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(operatorFeedId, true);
            _ds.displaySimple(operatorName, true);
            _ds.displaySimple(exContent, false);
            return _os;
        }
    public:
        taf::Int32 catalogId;
        std::string msgId;
        std::string operatorFeedId;
        std::string operatorName;
        std::string exContent;
    };
    inline bool operator==(const MsgOperate&l, const MsgOperate&r)
    {
        return l.catalogId == r.catalogId && l.msgId == r.msgId && l.operatorFeedId == r.operatorFeedId && l.operatorName == r.operatorName && l.exContent == r.exContent;
    }
    inline bool operator!=(const MsgOperate&l, const MsgOperate&r)
    {
        return !(l == r);
    }


}

#define Toon_Feed_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.userId,b.userId);jce_copy_struct(a.feedId,b.feedId);

#define Toon_BizMsg_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.catalogId,b.catalogId);jce_copy_struct(a.catalog,b.catalog);jce_copy_struct(a.subCatalog,b.subCatalog);jce_copy_struct(a.headFlag,b.headFlag);jce_copy_struct(a.headFeed,b.headFeed);jce_copy_struct(a.finishFlag,b.finishFlag);jce_copy_struct(a.summary,b.summary);jce_copy_struct(a.actionType,b.actionType);jce_copy_struct(a.bubbleFlag,b.bubbleFlag);jce_copy_struct(a.bizNo,b.bizNo);jce_copy_struct(a.showFlag,b.showFlag);jce_copy_struct(a.expireTime,b.expireTime);jce_copy_struct(a.contentType,b.contentType);jce_copy_struct(a.content,b.content);jce_copy_struct(a.subCatalogId,b.subCatalogId);jce_copy_struct(a.appInfo,b.appInfo);jce_copy_struct(a.senderName,b.senderName);jce_copy_struct(a.atType,b.atType);jce_copy_struct(a.atFeeds,b.atFeeds);

#define Toon_MsgOperate_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.catalogId,b.catalogId);jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.operatorFeedId,b.operatorFeedId);jce_copy_struct(a.operatorName,b.operatorName);jce_copy_struct(a.exContent,b.exContent);



#endif
