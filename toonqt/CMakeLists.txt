CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)
#set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9" CACHE STRING "Minimum OS X deployment version")
set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9")
PROJECT(toon)
set(PACKAGE "toon")

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/build_config)
    file(STRINGS "build_config" build_string)
else()
    file(COPY ${PROJECT_SOURCE_DIR}/toonsdk/config/build_config.txt DESTINATION ${CMAKE_CURRENT_SOURCE_DIR})
    file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/build_config.txt
        ${CMAKE_CURRENT_SOURCE_DIR}/build_config)
    file(STRINGS "build_config" build_string)
endif()
message("build_string:" ${build_string})
STRING( REGEX MATCH "SQLITE_CIPHER=([0-9]+)" sqlite_cipher "${build_string}")
STRING( REGEX MATCH "TOON_SIGNAL=([0-9]+)" toon_signal "${build_string}")
STRING( REGEX MATCH "TOON_TYPE=(.*)toon" TOON_TYPE_STR "${build_string}")
STRING( REGEX MATCH "VS_BUILD=([0-9]+)" vs_build "${build_string}")
message("sqlite_cipher:" ${sqlite_cipher})
message("toon_signal:" ${toon_signal})
message("toon_type_str:" ${TOON_TYPE_STR})
message("vs_build:" ${vs_build})



#cmake_policy(SET CMP0071 NEW)

if(vs_build MATCHES "^VS_BUILD=([1-9]+)$")
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(TOON_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/")
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(TOON_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/toonsdk/build/x86/bin/")
    endif()
else()
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        if(CMAKE_BUILD_TYPE MATCHES "Debug")
            set(TOON_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Debug")
        else()
            set(TOON_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Release")
        endif()
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        if(CMAKE_BUILD_TYPE MATCHES "Debug")
            set(TOON_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/toonsdk/build/x86/bin/Debug")
        else()
            set(TOON_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/toonsdk/build/x86/bin/Release")
        endif()
    endif()
endif()


if(TOON_TYPE_STR MATCHES "^TOON_TYPE=toon$")
    set(TOON_OUTPUT_NAME "通toon")
    set(TOONTYPE "toon")
elseif(TOON_TYPE_STR MATCHES "^TOON_TYPE=bjtoon$")
    set(TOON_OUTPUT_NAME "北京通")
    set(TOONTYPE "bjtoon")
    add_definitions(-DBJTOON)
elseif(TOON_TYPE_STR MATCHES "^TOON_TYPE=daotoon$")
    set(TOON_OUTPUT_NAME "冬奥通")
    set(TOONTYPE "daotoon")
    add_definitions(-DDAOTOON)
elseif(TOON_TYPE_STR MATCHES "^TOON_TYPE=qltoon$")
    set(TOON_OUTPUT_NAME "北京青联")
    set(TOONTYPE "qltoon")
    add_definitions(-DQLTOON)
elseif(TOON_TYPE_STR MATCHES "^TOON_TYPE=mctoon$")
    set(TOON_OUTPUT_NAME "门城通")
    set(TOONTYPE "mctoon")
    add_definitions(-DMCTOON)
elseif(TOON_TYPE_STR MATCHES "^TOON_TYPE=zqtoon$")
    set(TOON_OUTPUT_NAME "中青通")
    set(TOONTYPE "zqtoon")
    add_definitions(-DZQTOON)
else()
    set(TOON_OUTPUT_NAME "toon")
    set(TOONTYPE "toon")
endif()

if(APPLE)
    if(CMAKE_BUILD_TYPE MATCHES "Debug")
        set(TOON_MAC_APP_PATH ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Debug/${TOON_OUTPUT_NAME}.app/Contents/MacOS)
    else()
        set(TOON_MAC_APP_PATH ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Release/${TOON_OUTPUT_NAME}.app/Contents/MacOS)
    endif()
endif()
message(STATUS "toon_mac_app_path:" ${TOON_MAC_APP_PATH})
message("toon_type:" ${TOONTYPE})
#get git tag version
IF( NOT TOON_VERSION )
    FIND_PACKAGE( Git QUIET )
    IF( EXISTS ${GIT_EXECUTABLE} )
        EXECUTE_PROCESS( COMMAND ${GIT_EXECUTABLE} describe --tags --abbrev=1
            RESULT_VARIABLE GIT_RESULT
            OUTPUT_VARIABLE TOON_VERSION
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_STRIP_TRAILING_WHITESPACE )
        IF( NOT GIT_RESULT EQUAL 0 )
            MESSAGE( "Cannot get 'git describe' version!" )
        ENDIF()
    ENDIF()
ENDIF()

IF( NOT TOON_VERSION)
set(TOON_VERSION "1.2.1")
set(TOON_WINDOWS_VERSION "1,2,1")
ENDIF()

set(TOON_LONG_VERSION "${TOON_VERSION}")
#字符串处理
STRING( REGEX MATCH "^([0-9]+)\\.([0-9]+)\\.(.*)$" TOON_VERSION "${TOON_VERSION}")
STRING( REGEX MATCH "^([0-9]+)\\.([0-9]+)\\.([0-9]+)" TOON_VERSION "${TOON_VERSION}")
STRING( REGEX REPLACE "\\." "," TOON_WINDOWS_VERSION ${TOON_VERSION})
MESSAGE(STATUS "toon version:" ${TOON_VERSION})
MESSAGE(STATUS "toon long versoin:" ${TOON_LONG_VERSION})
MESSAGE(STATUS "toon windows version:" ${TOON_WINDOWS_VERSION})

IF(APPLE)
MESSAGE(STATUS "CMAKE_CXX_FLAGS:" ${CMAKE_CXX_FLAGS})
MESSAGE(STATUS "DEPLOYMENT_TARGET:" ${CMAKE_OSX_DEPLOYMENT_TARGET})
MESSAGE(STATUS "CMAKE_OSX_SYSROOT:" ${CMAKE_OSX_SYSROOT})
ENDIF()
#set (CMAKE_CXX_STANDARD 11)
#set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}-std=c++11")
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(CMAKE_C_COMPILER "/usr/bin/gcc")
    SET(CMAKE_CXX_COMPILER "/usr/bin/g++")
    IF(CMAKE_BUILD_TYPE MATCHES "Release")
        SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
    ELSEIF(CMAKE_BUILD_TYPE MATCHES "Debug")
        SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Wall -g")
        MESSAGE(STATUS "build_type:" ${CMAKE_BUILD_TYPE})
        MESSAGE(STATUS "cxx_flags:" ${CMAKE_CXX_FLAGS_DEBUG})
    ENDIF()
ENDIF()


IF(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
    #set(INSTALL_LIB_DIR "${PROJECT_SOURCE_DIR}/toonsdk/build/x64/Debug") # 假设安装目录在编译目录的lib子目录内
    #set(CMAKE_SKIP_BUILD_RPATH FALSE)
    #set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
    #set(CMAKE_INSTALL_RPATH "${PROJECT_SOURCE_DIR}/toonsdk/build/x64/Debug")
    #set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
    #set(CMAKE_CXX_COMPILER "clang++")
    #set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++abi")
    IF(CMAKE_BUILD_TYPE MATCHES "Release")
        SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
    ELSEIF(CMAKE_BUILD_TYPE MATCHES "Debug")
        SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -Wall -g")
    ENDIF()
ENDIF()



set_property(GLOBAL PROPERTY USE_FOLDERS ON)
if(NOT WIN32)
ADD_SUBDIRECTORY(qxtglobalshortcut)
endif()
ADD_SUBDIRECTORY(Common)
ADD_SUBDIRECTORY(TNMP)
ADD_SUBDIRECTORY(LocalStorage)
if(NOT APPLE)
ADD_SUBDIRECTORY(FaceId)
endif()
ADD_SUBDIRECTORY(NetWorkAPI)
if(NOT WIN32)
ADD_SUBDIRECTORY(HTTP)
ADD_SUBDIRECTORY(TNIMSDK)
endif()
ADD_SUBDIRECTORY(IMCore)
ADD_SUBDIRECTORY(ToonProtocol)
ADD_SUBDIRECTORY(TNMVD)
ADD_SUBDIRECTORY(ScreenShot)
ADD_SUBDIRECTORY(Search)
ADD_SUBDIRECTORY(Notice)
ADD_SUBDIRECTORY(SetUp)
ADD_SUBDIRECTORY(CardCase)
if(WIN32)
    ADD_SUBDIRECTORY(Upgrade)
endif()
ADD_SUBDIRECTORY(Mine)
ADD_SUBDIRECTORY(HomePage)
ADD_SUBDIRECTORY(Avatar)
ADD_SUBDIRECTORY(Toon)
