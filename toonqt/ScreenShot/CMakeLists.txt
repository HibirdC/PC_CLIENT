cmake_minimum_required(VERSION 2.8.11) 
set(PACKAGE "ScreenShot")
set(CMAKE_AUTOMOC ON)

IF (CMAKE_SYSTEM_NAME MATCHES "Linux") 
    add_definitions(-DSCREENSHOT_LIB)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
    add_definitions(-DQT_DLL -DSCREENSHOT_LIB -DUNICODE)
    SET (CMAKE_DEBUG_POSTFIX "d")
    configure_file(
      ${CMAKE_SOURCE_DIR}/version.rc.in
      ${CMAKE_CURRENT_SOURCE_DIR}/ScreenShot.rc
      @ONLY)
ELSE()
    add_definitions(-DSCREENSHOT_LIB)
ENDIF()

#根据不同平台的编译环境加载lib
IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET (CMAKE_DEBUG_POSTFIX "d")
    #set (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    #set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
        IF(CMAKE_BUILD_TYPE MATCHES "Debug")
            SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Debug/Commond.lib)
        ELSE()
            SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Release/Common.lib)
        ENDIF()
    ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 4)
        IF(CMAKE_BUILD_TYPE MATCHES "Debug")
            SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x86/bin/Debug/Commond.lib)
        ELSE()
            SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x86/bin/Release/Common.lib)
        ENDIF()
    ENDIF()
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    IF(CMAKE_BUILD_TYPE MATCHES "Debug")
        SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Debug/libCommon.so)
    ELSE()
        SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Release/libCommon.so)
    ENDIF()
ENDIF ()
IF(APPLE)
    IF(CMAKE_BUILD_TYPE MATCHES "Debug")
        SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Debug/libCommon.dylib)
    ELSE()
        SET(COMMONLIB ${PROJECT_SOURCE_DIR}/toonsdk/build/x64/bin/Release/libCommon.dylib)
    ENDIF()
    set(MAC_LIBS)
    FIND_LIBRARY( COREFOUNDATION_LIBRARY CoreFoundation )
    LIST( APPEND MAC_LIBS ${COREFOUNDATION_LIBRARY} )

    FIND_LIBRARY( SECURITY_LIBRARY Security )
    LIST( APPEND MAC_LIBS ${SECURITY_LIBRARY} )

    FIND_LIBRARY( CARBON_LIBRARY Carbon)
    LIST( APPEND MAC_LIBS ${CARBON_LIBRARY} )

    FIND_LIBRARY( APPKIT_LIBRARY AppKit )
    LIST( APPEND MAC_LIBS ${APPKIT_LIBRARY} )

    FIND_LIBRARY( COREGRAPHICS_LIBRARY CoreGraphics )
    LIST(APPEND MAC_LIBS ${COREGRAPHICS_LIBRARY})

    FIND_LIBRARY( QUARTZCORE_LIBRARY QuartzCore)
    LIST(APPEND MAC_LIBS ${QUARTZCORE_LIBRARY})

    #FIND_LIBRARY( COCOA_LIBRARY Cocoa)
    #LIST(APPEND MAC_LIBS ${COCOA_LIBRARY})

ENDIF()

#头文件搜索路径
include_directories(${CMAKE_CURRENT_SOURCE_DIR}) 
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${PROJECT_SOURCE_DIR}/Common)

FILE(GLOB SCREEN_HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
FILE(GLOB SCREEN_FORM_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.ui)
FILE(GLOB SCREEN_SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
FILE(GLOB SCREEN_RESOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.qrc)


#MESSAGE(STATUS "common_source_files:" ${SCREEN_SOURCE_FILES})
if (MSVC)
    SOURCE_GROUP("Header Files" FILES ${SCREEN_HEADER_FILES} ${SCREEN_MOC_FILES})
    SOURCE_GROUP("Form Files" FILES ${SCREEN_FORM_FILES})
    SOURCE_GROUP("Source Files" FILES ${SCREEN_SOURCE_FILES})
    SOURCE_GROUP("Resource Files" FILES ${SCREEN_RESOURCE_FILES})
endif(MSVC)
#QT GUI

find_package(Qt5Core)
find_package(Qt5Widgets)
find_package(Qt5Gui)



QT5_WRAP_UI(FORMS_UIC ${SCREEN_FORM_FILES})
QT5_ADD_RESOURCES(QRC_RCC ${SCREEN_RESOURCE_FILES})
#QT5_WRAP_CPP(HEADERS_MOC ${SCREEN_MOC_FILES})

#MESSAGE(STATUS "headers_moc:" ${HEADERS_MOC})
if(MSVC)
    SOURCE_GROUP("Generated Files" FILES ${FORMS_UIC} ${HEADERS_MOC} ${FORMS_UIC})
endif(MSVC)

IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
ADD_LIBRARY(${PACKAGE} SHARED
    ${SCREEN_RESOURCE_FILES}
    ${SCREEN_HEADER_FILES}
    ${SCREEN_SOURCE_FILES}
    ${SCREEN_FORM_FILES}
    ${FROMS_UIC}
    ${QRC_RCC}
    ${SCREEN_MOC_FILES}
    ${HEADERS_MOC}
    ${CMAKE_CURRENT_SOURCE_DIR}/ScreenShot.rc
    )
ELSE()
ADD_LIBRARY(${PACKAGE} SHARED
    ${SCREEN_RESOURCE_FILES}
    ${SCREEN_HEADER_FILES}
    ${SCREEN_SOURCE_FILES}
    ${SCREEN_FORM_FILES}
    ${FROMS_UIC}
    ${QRC_RCC}
    ${SCREEN_MOC_FILES}
    ${HEADERS_MOC}
    )
ENDIF()

set_target_properties(${PACKAGE} PROPERTIES SOVERSION ${TOON_VERSION})

TARGET_LINK_LIBRARIES(${PACKAGE}
    Qt5::Widgets
    ${COMMONLIB}
    )
#qt5_use_modules(${PACKAGE} Widgets WebEngineWidgets WebChannel NetWork)
#根据32bit和64bit生成不同的目录
set(LIBRARY_OUTPUT_PATH ${TOON_OUTPUT_PATH})
