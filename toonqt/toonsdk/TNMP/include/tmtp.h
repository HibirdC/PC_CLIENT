// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.7.1 by WSRD Tencent.
// Generated from `Tmtp.jce'
// **********************************************************************

#ifndef __TMTP_H_
#define __TMTP_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
#include "tmtp_type.h"

using namespace std;


namespace Toon
{
    enum CONNECT_RESULT
    {
        CONNECT_RESULT_SUCCESS = 0,
        CONNECT_RESULT_ERROR_PROTOCOL = 1,
        CONNECT_RESULT_ERROR_INDICATE = 2,
        CONNECT_RESULT_SERVICE_UNAVAILABLE = 3,
        CONNECT_RESULT_ERROR_USERNAME_OR_PASSWORD = 4,
        CONNECT_RESULT_KICKOUT = 5,
        CONNECT_RESULT_OTHER = 6,
    };
    inline string etos(const CONNECT_RESULT & e)
    {
        switch(e)
        {
            case CONNECT_RESULT_SUCCESS: return "CONNECT_RESULT_SUCCESS";
            case CONNECT_RESULT_ERROR_PROTOCOL: return "CONNECT_RESULT_ERROR_PROTOCOL";
            case CONNECT_RESULT_ERROR_INDICATE: return "CONNECT_RESULT_ERROR_INDICATE";
            case CONNECT_RESULT_SERVICE_UNAVAILABLE: return "CONNECT_RESULT_SERVICE_UNAVAILABLE";
            case CONNECT_RESULT_ERROR_USERNAME_OR_PASSWORD: return "CONNECT_RESULT_ERROR_USERNAME_OR_PASSWORD";
            case CONNECT_RESULT_KICKOUT: return "CONNECT_RESULT_KICKOUT";
            case CONNECT_RESULT_OTHER: return "CONNECT_RESULT_OTHER";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, CONNECT_RESULT & e)
    {
        if(s == "CONNECT_RESULT_SUCCESS")  { e=CONNECT_RESULT_SUCCESS; return 0;}
        if(s == "CONNECT_RESULT_ERROR_PROTOCOL")  { e=CONNECT_RESULT_ERROR_PROTOCOL; return 0;}
        if(s == "CONNECT_RESULT_ERROR_INDICATE")  { e=CONNECT_RESULT_ERROR_INDICATE; return 0;}
        if(s == "CONNECT_RESULT_SERVICE_UNAVAILABLE")  { e=CONNECT_RESULT_SERVICE_UNAVAILABLE; return 0;}
        if(s == "CONNECT_RESULT_ERROR_USERNAME_OR_PASSWORD")  { e=CONNECT_RESULT_ERROR_USERNAME_OR_PASSWORD; return 0;}
        if(s == "CONNECT_RESULT_KICKOUT")  { e=CONNECT_RESULT_KICKOUT; return 0;}
        if(s == "CONNECT_RESULT_OTHER")  { e=CONNECT_RESULT_OTHER; return 0;}

        return -1;
    }

    enum GROUP_RESULT
    {
        GROUP_RESULT_SUCCESS = 0,
        GROUP_RESULT_GROUP_ID_NULL = 1,
        GROUP_RESULT_GROUP_ID_OVERLENGTH = 2,
        GROUP_RESULT_CLIENT_ID_ERROR = 3,
        GROUP_RESULT_DB_ERR = 4,
        GROUP_RESULT_OTHER = 5,
    };
    inline string etos(const GROUP_RESULT & e)
    {
        switch(e)
        {
            case GROUP_RESULT_SUCCESS: return "GROUP_RESULT_SUCCESS";
            case GROUP_RESULT_GROUP_ID_NULL: return "GROUP_RESULT_GROUP_ID_NULL";
            case GROUP_RESULT_GROUP_ID_OVERLENGTH: return "GROUP_RESULT_GROUP_ID_OVERLENGTH";
            case GROUP_RESULT_CLIENT_ID_ERROR: return "GROUP_RESULT_CLIENT_ID_ERROR";
            case GROUP_RESULT_DB_ERR: return "GROUP_RESULT_DB_ERR";
            case GROUP_RESULT_OTHER: return "GROUP_RESULT_OTHER";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, GROUP_RESULT & e)
    {
        if(s == "GROUP_RESULT_SUCCESS")  { e=GROUP_RESULT_SUCCESS; return 0;}
        if(s == "GROUP_RESULT_GROUP_ID_NULL")  { e=GROUP_RESULT_GROUP_ID_NULL; return 0;}
        if(s == "GROUP_RESULT_GROUP_ID_OVERLENGTH")  { e=GROUP_RESULT_GROUP_ID_OVERLENGTH; return 0;}
        if(s == "GROUP_RESULT_CLIENT_ID_ERROR")  { e=GROUP_RESULT_CLIENT_ID_ERROR; return 0;}
        if(s == "GROUP_RESULT_DB_ERR")  { e=GROUP_RESULT_DB_ERR; return 0;}
        if(s == "GROUP_RESULT_OTHER")  { e=GROUP_RESULT_OTHER; return 0;}

        return -1;
    }

   
    inline string etos(const MESSAGE_ACK_RESULT & e)
    {
        switch(e)
        {
            case MESSAGE_ACK_MSG_SUCCESS: return "MESSAGE_ACK_MSG_SUCCESS";
            case MESSAGE_ACK_MSG_PROHIBITED: return "MESSAGE_ACK_MSG_PROHIBITED";
            case MESSAGE_ACK_MSG_ILLEGAL_FROM: return "MESSAGE_ACK_MSG_ILLEGAL_FROM";
            case MESSAGE_ACK_MSG_ILLEGAL_TO: return "MESSAGE_ACK_MSG_ILLEGAL_TO";
            case MESSAGE_ACK_MSG_TOOLONG: return "MESSAGE_ACK_MSG_TOOLONG";
            case MESSAGE_ACK_MSG_SERVERERROR: return "MESSAGE_ACK_MSG_SERVERERROR";
            case MESSAGE_ACK_MSG_FORMATERROR: return "MESSAGE_ACK_MSG_FORMATERROR";
            case MESSAGE_ACK_MSG_NOTINGROUP: return "MESSAGE_ACK_MSG_NOTINGROUP";
            case MESSAGE_ACK_MSG_FEEDFORBIDDEN: return "MESSAGE_ACK_MSG_FEEDFORBIDDEN";
            default: return "";
        }
        return "";
    }
    inline int stoe(const string & s, MESSAGE_ACK_RESULT & e)
    {
        if(s == "MESSAGE_ACK_MSG_SUCCESS")  { e=MESSAGE_ACK_MSG_SUCCESS; return 0;}
        if(s == "MESSAGE_ACK_MSG_PROHIBITED")  { e=MESSAGE_ACK_MSG_PROHIBITED; return 0;}
        if(s == "MESSAGE_ACK_MSG_ILLEGAL_FROM")  { e=MESSAGE_ACK_MSG_ILLEGAL_FROM; return 0;}
        if(s == "MESSAGE_ACK_MSG_ILLEGAL_TO")  { e=MESSAGE_ACK_MSG_ILLEGAL_TO; return 0;}
        if(s == "MESSAGE_ACK_MSG_TOOLONG")  { e=MESSAGE_ACK_MSG_TOOLONG; return 0;}
        if(s == "MESSAGE_ACK_MSG_SERVERERROR")  { e=MESSAGE_ACK_MSG_SERVERERROR; return 0;}
        if(s == "MESSAGE_ACK_MSG_FORMATERROR")  { e=MESSAGE_ACK_MSG_FORMATERROR; return 0;}
        if(s == "MESSAGE_ACK_MSG_NOTINGROUP")  { e=MESSAGE_ACK_MSG_NOTINGROUP; return 0;}
        if(s == "MESSAGE_ACK_MSG_FEEDFORBIDDEN")  { e=MESSAGE_ACK_MSG_FEEDFORBIDDEN; return 0;}

        return -1;
    }

    struct ConnectReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.ConnectReq";
        }
        static string MD5()
        {
            return "dcae4fa4f63d0dee84566495b7d42b35";
        }
        ConnectReq()
        :client_id(""),user_name(""),password(""),device_type(0),deviceToken(""),deviceId(""),app_type(100),version(""),toon_type(100),protocol_version(0),push_service_type(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(client_id, 0);
            _os.write(user_name, 1);
            _os.write(password, 2);
            _os.write(device_type, 3);
            _os.write(deviceToken, 4);
            _os.write(deviceId, 5);
            _os.write(app_type, 6);
            _os.write(version, 7);
            _os.write(toon_type, 8);
            _os.write(protocol_version, 9);
            _os.write(push_service_type, 10);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(client_id, 0, true);
            _is.read(user_name, 1, true);
            _is.read(password, 2, false);
            _is.read(device_type, 3, false);
            _is.read(deviceToken, 4, false);
            _is.read(deviceId, 5, false);
            _is.read(app_type, 6, false);
            _is.read(version, 7, false);
            _is.read(toon_type, 8, false);
            _is.read(protocol_version, 9, false);
            _is.read(push_service_type, 10, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(client_id,"client_id");
            _ds.display(user_name,"user_name");
            _ds.display(password,"password");
            _ds.display(device_type,"device_type");
            _ds.display(deviceToken,"deviceToken");
            _ds.display(deviceId,"deviceId");
            _ds.display(app_type,"app_type");
            _ds.display(version,"version");
            _ds.display(toon_type,"toon_type");
            _ds.display(protocol_version,"protocol_version");
            _ds.display(push_service_type,"push_service_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(client_id, true);
            _ds.displaySimple(user_name, true);
            _ds.displaySimple(password, true);
            _ds.displaySimple(device_type, true);
            _ds.displaySimple(deviceToken, true);
            _ds.displaySimple(deviceId, true);
            _ds.displaySimple(app_type, true);
            _ds.displaySimple(version, true);
            _ds.displaySimple(toon_type, true);
            _ds.displaySimple(protocol_version, true);
            _ds.displaySimple(push_service_type, false);
            return _os;
        }
    public:
        std::string client_id;
        std::string user_name;
        std::string password;
        taf::Int32 device_type;
        std::string deviceToken;
        std::string deviceId;
        taf::Int32 app_type;
        std::string version;
        taf::Int32 toon_type;
        taf::Int32 protocol_version;
        taf::Int32 push_service_type;
    };
    inline bool operator==(const ConnectReq&l, const ConnectReq&r)
    {
        return l.client_id == r.client_id && l.user_name == r.user_name && l.password == r.password && l.device_type == r.device_type && l.deviceToken == r.deviceToken && l.deviceId == r.deviceId && l.app_type == r.app_type && l.version == r.version && l.toon_type == r.toon_type && l.protocol_version == r.protocol_version && l.push_service_type == r.push_service_type;
    }
    inline bool operator!=(const ConnectReq&l, const ConnectReq&r)
    {
        return !(l == r);
    }

    struct ConnectResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.ConnectResp";
        }
        static string MD5()
        {
            return "d6ad2b21190a57b2a29087ee178eba54";
        }
        ConnectResp()
        :server_timeout(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write((taf::Int32)code, 0);
            _os.write(server_timeout, 1);
            _os.write(vforbidden_content_type, 2);
            _os.write(mToonTypeSwitch, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read((taf::Int32&)code, 0, true);
            _is.read(server_timeout, 1, false);
            _is.read(vforbidden_content_type, 2, false);
            _is.read(mToonTypeSwitch, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display((taf::Int32)code,"code");
            _ds.display(server_timeout,"server_timeout");
            _ds.display(vforbidden_content_type,"vforbidden_content_type");
            _ds.display(mToonTypeSwitch,"mToonTypeSwitch");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple((taf::Int32)code, true);
            _ds.displaySimple(server_timeout, true);
            _ds.displaySimple(vforbidden_content_type, true);
            _ds.displaySimple(mToonTypeSwitch, false);
            return _os;
        }
    public:
        Toon::CONNECT_RESULT code;
        taf::Int32 server_timeout;
        vector<taf::Int32> vforbidden_content_type;
        map<std::string, taf::Int32> mToonTypeSwitch;
    };
    inline bool operator==(const ConnectResp&l, const ConnectResp&r)
    {
        return l.code == r.code && l.server_timeout == r.server_timeout && l.vforbidden_content_type == r.vforbidden_content_type && l.mToonTypeSwitch == r.mToonTypeSwitch;
    }
    inline bool operator!=(const ConnectResp&l, const ConnectResp&r)
    {
        return !(l == r);
    }

    struct KickOutReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.KickOutReq";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        KickOutReq()
        :toon_type(-1),device_type(-1)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(toon_type, 0);
            _os.write(device_type, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(toon_type, 0, true);
            _is.read(device_type, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(toon_type,"toon_type");
            _ds.display(device_type,"device_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(toon_type, true);
            _ds.displaySimple(device_type, false);
            return _os;
        }
    public:
        taf::Int32 toon_type;
        taf::Int32 device_type;
    };
    inline bool operator==(const KickOutReq&l, const KickOutReq&r)
    {
        return l.toon_type == r.toon_type && l.device_type == r.device_type;
    }
    inline bool operator!=(const KickOutReq&l, const KickOutReq&r)
    {
        return !(l == r);
    }

    struct KickOutAck : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.KickOutAck";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        KickOutAck()
        :code(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(code, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(code, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(code,"code");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(code, false);
            return _os;
        }
    public:
        taf::Int32 code;
    };
    inline bool operator==(const KickOutAck&l, const KickOutAck&r)
    {
        return l.code == r.code;
    }
    inline bool operator!=(const KickOutAck&l, const KickOutAck&r)
    {
        return !(l == r);
    }

    struct GroupReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.GroupReq";
        }
        static string MD5()
        {
            return "c9297db2d658badddcde8e004c809945";
        }
        GroupReq()
        :msg_id(""),group_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msg_id, 0);
            _os.write(group_id, 1);
            _os.write(client_ids, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(msg_id, 0, true);
            _is.read(group_id, 1, true);
            _is.read(client_ids, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msg_id,"msg_id");
            _ds.display(group_id,"group_id");
            _ds.display(client_ids,"client_ids");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msg_id, true);
            _ds.displaySimple(group_id, true);
            _ds.displaySimple(client_ids, false);
            return _os;
        }
    public:
        std::string msg_id;
        std::string group_id;
        vector<std::string> client_ids;
    };
    inline bool operator==(const GroupReq&l, const GroupReq&r)
    {
        return l.msg_id == r.msg_id && l.group_id == r.group_id && l.client_ids == r.client_ids;
    }
    inline bool operator!=(const GroupReq&l, const GroupReq&r)
    {
        return !(l == r);
    }

    struct GroupResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.GroupResp";
        }
        static string MD5()
        {
            return "ecf5eae4ff24e7e8f68c5876b0e3cd34";
        }
        GroupResp()
        :msg_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msg_id, 0);
            _os.write((taf::Int32)code, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(msg_id, 0, true);
            _is.read((taf::Int32&)code, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msg_id,"msg_id");
            _ds.display((taf::Int32)code,"code");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msg_id, true);
            _ds.displaySimple((taf::Int32)code, false);
            return _os;
        }
    public:
        std::string msg_id;
        Toon::GROUP_RESULT code;
    };
    inline bool operator==(const GroupResp&l, const GroupResp&r)
    {
        return l.msg_id == r.msg_id && l.code == r.code;
    }
    inline bool operator!=(const GroupResp&l, const GroupResp&r)
    {
        return !(l == r);
    }

    struct MsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.MsgReq";
        }
        static string MD5()
        {
            return "af39649702efd1f48bcb58901f4b889d";
        }
        MsgReq()
        :msg_id(""),seq_id(0),timestamp(0),expire_time(0),from(""),to(""),to_client_id(""),pushinfo(""),status(0),priority(0),flags(0),from_client_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msg_id, 0);
            _os.write(seq_id, 1);
            _os.write(timestamp, 2);
            _os.write(expire_time, 3);
            _os.write(from, 4);
            _os.write(to, 5);
            _os.write(to_client_id, 6);
            _os.write(pushinfo, 7);
            _os.write(content, 8);
            _os.write(status, 9);
            _os.write(priority, 10);
            _os.write(flags, 11);
            _os.write(from_client_id, 12);
            _os.write(to_toon_type, 13);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(msg_id, 0, true);
            _is.read(seq_id, 1, false);
            _is.read(timestamp, 2, false);
            _is.read(expire_time, 3, false);
            _is.read(from, 4, true);
            _is.read(to, 5, true);
            _is.read(to_client_id, 6, false);
            _is.read(pushinfo, 7, false);
            _is.read(content, 8, false);
            _is.read(status, 9, false);
            _is.read(priority, 10, false);
            _is.read(flags, 11, false);
            _is.read(from_client_id, 12, false);
            _is.read(to_toon_type, 13, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msg_id,"msg_id");
            _ds.display(seq_id,"seq_id");
            _ds.display(timestamp,"timestamp");
            _ds.display(expire_time,"expire_time");
            _ds.display(from,"from");
            _ds.display(to,"to");
            _ds.display(to_client_id,"to_client_id");
            _ds.display(pushinfo,"pushinfo");
            _ds.display(content,"content");
            _ds.display(status,"status");
            _ds.display(priority,"priority");
            _ds.display(flags,"flags");
            _ds.display(from_client_id,"from_client_id");
            _ds.display(to_toon_type,"to_toon_type");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msg_id, true);
            _ds.displaySimple(seq_id, true);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(expire_time, true);
            _ds.displaySimple(from, true);
            _ds.displaySimple(to, true);
            _ds.displaySimple(to_client_id, true);
            _ds.displaySimple(pushinfo, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(status, true);
            _ds.displaySimple(priority, true);
            _ds.displaySimple(flags, true);
            _ds.displaySimple(from_client_id, true);
            _ds.displaySimple(to_toon_type, false);
            return _os;
        }
    public:
        std::string msg_id;
        taf::Int64 seq_id;
        taf::Int64 timestamp;
        taf::Int64 expire_time;
        std::string from;
        std::string to;
        std::string to_client_id;
        std::string pushinfo;
        vector<taf::Char> content;
        taf::Int32 status;
        taf::Int32 priority;
        taf::Int64 flags;
        std::string from_client_id;
        vector<std::string> to_toon_type;
    };
    inline bool operator==(const MsgReq&l, const MsgReq&r)
    {
        return l.msg_id == r.msg_id && l.seq_id == r.seq_id && l.timestamp == r.timestamp && l.expire_time == r.expire_time && l.from == r.from && l.to == r.to && l.to_client_id == r.to_client_id && l.pushinfo == r.pushinfo && l.content == r.content && l.status == r.status && l.priority == r.priority && l.flags == r.flags && l.from_client_id == r.from_client_id && l.to_toon_type == r.to_toon_type;
    }
    inline bool operator!=(const MsgReq&l, const MsgReq&r)
    {
        return !(l == r);
    }

    struct MsgAck : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.MsgAck";
        }
        static string MD5()
        {
            return "85a2abe6ebfd46f1ae2edf3af5142f25";
        }
        MsgAck()
        :msg_id(""),seq_id(0),type(0),from(""),to(""),priority(0),flags(0),retcode(0),timestamp(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msg_id, 0);
            _os.write(seq_id, 1);
            _os.write(type, 2);
            _os.write(from, 3);
            _os.write(to, 4);
            _os.write(priority, 5);
            _os.write(flags, 6);
            _os.write(retcode, 7);
            _os.write(timestamp, 8);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(msg_id, 0, false);
            _is.read(seq_id, 1, false);
            _is.read(type, 2, false);
            _is.read(from, 3, false);
            _is.read(to, 4, false);
            _is.read(priority, 5, false);
            _is.read(flags, 6, false);
            _is.read(retcode, 7, false);
            _is.read(timestamp, 8, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msg_id,"msg_id");
            _ds.display(seq_id,"seq_id");
            _ds.display(type,"type");
            _ds.display(from,"from");
            _ds.display(to,"to");
            _ds.display(priority,"priority");
            _ds.display(flags,"flags");
            _ds.display(retcode,"retcode");
            _ds.display(timestamp,"timestamp");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msg_id, true);
            _ds.displaySimple(seq_id, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(from, true);
            _ds.displaySimple(to, true);
            _ds.displaySimple(priority, true);
            _ds.displaySimple(flags, true);
            _ds.displaySimple(retcode, true);
            _ds.displaySimple(timestamp, false);
            return _os;
        }
    public:
        std::string msg_id;
        taf::Int64 seq_id;
        taf::Int32 type;
        std::string from;
        std::string to;
        taf::Int32 priority;
        taf::Int64 flags;
        taf::Int32 retcode;
        taf::Int64 timestamp;
    };
    inline bool operator==(const MsgAck&l, const MsgAck&r)
    {
        return l.msg_id == r.msg_id && l.seq_id == r.seq_id && l.type == r.type && l.from == r.from && l.to == r.to && l.priority == r.priority && l.flags == r.flags && l.retcode == r.retcode && l.timestamp == r.timestamp;
    }
    inline bool operator!=(const MsgAck&l, const MsgAck&r)
    {
        return !(l == r);
    }

    struct OffMsgCountItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.OffMsgCountItem";
        }
        static string MD5()
        {
            return "ec8bae28d2c37a6dedae94df601d205d";
        }
        OffMsgCountItem()
        :count(-1),type(0),seq_id(0),seq_id_priority(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(count, 1);
            _os.write(type, 2);
            _os.write(seq_id, 3);
            _os.write(msgs, 4);
            _os.write(seq_id_priority, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(count, 1, false);
            _is.read(type, 2, true);
            _is.read(seq_id, 3, true);
            _is.read(msgs, 4, false);
            _is.read(seq_id_priority, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(count,"count");
            _ds.display(type,"type");
            _ds.display(seq_id,"seq_id");
            _ds.display(msgs,"msgs");
            _ds.display(seq_id_priority,"seq_id_priority");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(count, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(seq_id, true);
            _ds.displaySimple(msgs, true);
            _ds.displaySimple(seq_id_priority, false);
            return _os;
        }
    public:
        taf::Int32 count;
        taf::Int32 type;
        taf::Int64 seq_id;
        vector<Toon::MsgReq> msgs;
        taf::Int64 seq_id_priority;
    };
    inline bool operator==(const OffMsgCountItem&l, const OffMsgCountItem&r)
    {
        return l.count == r.count && l.type == r.type && l.seq_id == r.seq_id && l.msgs == r.msgs && l.seq_id_priority == r.seq_id_priority;
    }
    inline bool operator!=(const OffMsgCountItem&l, const OffMsgCountItem&r)
    {
        return !(l == r);
    }

    struct OffMsgCountResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.OffMsgCountResp";
        }
        static string MD5()
        {
            return "4aa637e94f89aa4ea7b7681d88b86ea2";
        }
        OffMsgCountResp()
        :code(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msg_counts, 0);
            _os.write(code, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(msg_counts, 0, true);
            _is.read(code, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msg_counts,"msg_counts");
            _ds.display(code,"code");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msg_counts, true);
            _ds.displaySimple(code, false);
            return _os;
        }
    public:
        vector<Toon::OffMsgCountItem> msg_counts;
        taf::Int32 code;
    };
    inline bool operator==(const OffMsgCountResp&l, const OffMsgCountResp&r)
    {
        return l.msg_counts == r.msg_counts && l.code == r.code;
    }
    inline bool operator!=(const OffMsgCountResp&l, const OffMsgCountResp&r)
    {
        return !(l == r);
    }

    struct OffMsgCountACK : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.OffMsgCountACK";
        }
        static string MD5()
        {
            return "b89896b999c5a673cf1e6e4aa36d39ab";
        }
        OffMsgCountACK()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(acks, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(acks, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(acks,"acks");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(acks, false);
            return _os;
        }
    public:
        vector<Toon::MsgAck> acks;
    };
    inline bool operator==(const OffMsgCountACK&l, const OffMsgCountACK&r)
    {
        return l.acks == r.acks;
    }
    inline bool operator!=(const OffMsgCountACK&l, const OffMsgCountACK&r)
    {
        return !(l == r);
    }

    struct OffMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.OffMsgReq";
        }
        static string MD5()
        {
            return "470cac5baa671620b2fad231bd557fd1";
        }
        OffMsgReq()
        :seq_id(0),from(""),to(""),type(0),count(0),priority(0),req_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(seq_id, 0);
            _os.write(from, 1);
            _os.write(to, 2);
            _os.write(type, 3);
            _os.write(count, 4);
            _os.write(priority, 5);
            _os.write(req_id, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(seq_id, 0, true);
            _is.read(from, 1, true);
            _is.read(to, 2, true);
            _is.read(type, 3, true);
            _is.read(count, 4, true);
            _is.read(priority, 5, false);
            _is.read(req_id, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(seq_id,"seq_id");
            _ds.display(from,"from");
            _ds.display(to,"to");
            _ds.display(type,"type");
            _ds.display(count,"count");
            _ds.display(priority,"priority");
            _ds.display(req_id,"req_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(seq_id, true);
            _ds.displaySimple(from, true);
            _ds.displaySimple(to, true);
            _ds.displaySimple(type, true);
            _ds.displaySimple(count, true);
            _ds.displaySimple(priority, true);
            _ds.displaySimple(req_id, false);
            return _os;
        }
    public:
        taf::Int64 seq_id;
        std::string from;
        std::string to;
        taf::Int32 type;
        taf::Int32 count;
        taf::Int32 priority;
        std::string req_id;
    };
    inline bool operator==(const OffMsgReq&l, const OffMsgReq&r)
    {
        return l.seq_id == r.seq_id && l.from == r.from && l.to == r.to && l.type == r.type && l.count == r.count && l.priority == r.priority && l.req_id == r.req_id;
    }
    inline bool operator!=(const OffMsgReq&l, const OffMsgReq&r)
    {
        return !(l == r);
    }

    struct OffMsgItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.OffMsgItem";
        }
        static string MD5()
        {
            return "16bc09b4478ec29863ceec25e26d169c";
        }
        OffMsgItem()
        :type(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(item, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(type, 0, true);
            _is.read(item, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(item,"item");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(item, false);
            return _os;
        }
    public:
        taf::Int32 type;
        Toon::MsgReq item;
    };
    inline bool operator==(const OffMsgItem&l, const OffMsgItem&r)
    {
        return l.type == r.type && l.item == r.item;
    }
    inline bool operator!=(const OffMsgItem&l, const OffMsgItem&r)
    {
        return !(l == r);
    }

    struct OffMsgResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.OffMsgResp";
        }
        static string MD5()
        {
            return "0511c3f48e96ee2db88b3673bc7b6400";
        }
        OffMsgResp()
        :code(0),req_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgs, 0);
            _os.write(code, 1);
            _os.write(req_id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(msgs, 0, true);
            _is.read(code, 1, false);
            _is.read(req_id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgs,"msgs");
            _ds.display(code,"code");
            _ds.display(req_id,"req_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgs, true);
            _ds.displaySimple(code, true);
            _ds.displaySimple(req_id, false);
            return _os;
        }
    public:
        vector<Toon::OffMsgItem> msgs;
        taf::Int32 code;
        std::string req_id;
    };
    inline bool operator==(const OffMsgResp&l, const OffMsgResp&r)
    {
        return l.msgs == r.msgs && l.code == r.code && l.req_id == r.req_id;
    }
    inline bool operator!=(const OffMsgResp&l, const OffMsgResp&r)
    {
        return !(l == r);
    }

    struct MonitorResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.MonitorResp";
        }
        static string MD5()
        {
            return "31b837dee0e3f970aa2d14771bf49d74";
        }
        MonitorResp()
        :broker_id(""),user_online(0),send_msgs(0),recv_msgs(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(broker_id, 0);
            _os.write(user_online, 1);
            _os.write(send_msgs, 2);
            _os.write(recv_msgs, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(broker_id, 0, false);
            _is.read(user_online, 1, false);
            _is.read(send_msgs, 2, false);
            _is.read(recv_msgs, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(broker_id,"broker_id");
            _ds.display(user_online,"user_online");
            _ds.display(send_msgs,"send_msgs");
            _ds.display(recv_msgs,"recv_msgs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(broker_id, true);
            _ds.displaySimple(user_online, true);
            _ds.displaySimple(send_msgs, true);
            _ds.displaySimple(recv_msgs, false);
            return _os;
        }
    public:
        std::string broker_id;
        taf::Int32 user_online;
        taf::Int32 send_msgs;
        taf::Int32 recv_msgs;
    };
    inline bool operator==(const MonitorResp&l, const MonitorResp&r)
    {
        return l.broker_id == r.broker_id && l.user_online == r.user_online && l.send_msgs == r.send_msgs && l.recv_msgs == r.recv_msgs;
    }
    inline bool operator!=(const MonitorResp&l, const MonitorResp&r)
    {
        return !(l == r);
    }

    struct SyncReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.SyncReq";
        }
        static string MD5()
        {
            return "8d61b639cda77ea57102c6b9cbb5aca2";
        }
        SyncReq()
        :client_id(""),device_token("-1"),apns_unreadnum(-1)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(client_id, 0);
            _os.write(device_token, 1);
            _os.write(apns_unreadnum, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(client_id, 0, true);
            _is.read(device_token, 1, false);
            _is.read(apns_unreadnum, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(client_id,"client_id");
            _ds.display(device_token,"device_token");
            _ds.display(apns_unreadnum,"apns_unreadnum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(client_id, true);
            _ds.displaySimple(device_token, true);
            _ds.displaySimple(apns_unreadnum, false);
            return _os;
        }
    public:
        std::string client_id;
        std::string device_token;
        taf::Int32 apns_unreadnum;
    };
    inline bool operator==(const SyncReq&l, const SyncReq&r)
    {
        return l.client_id == r.client_id && l.device_token == r.device_token && l.apns_unreadnum == r.apns_unreadnum;
    }
    inline bool operator!=(const SyncReq&l, const SyncReq&r)
    {
        return !(l == r);
    }

    struct SyncResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.SyncResp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SyncResp()
        :code(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(code, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(code, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(code,"code");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(code, false);
            return _os;
        }
    public:
        taf::Int32 code;
    };
    inline bool operator==(const SyncResp&l, const SyncResp&r)
    {
        return l.code == r.code;
    }
    inline bool operator!=(const SyncResp&l, const SyncResp&r)
    {
        return !(l == r);
    }

    struct SessionName : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.SessionName";
        }
        static string MD5()
        {
            return "1f47da24b69e655580a48d1f7cab279a";
        }
        SessionName()
        :type(0),from(""),to("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(from, 1);
            _os.write(to, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(type, 0, true);
            _is.read(from, 1, true);
            _is.read(to, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(from,"from");
            _ds.display(to,"to");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(from, true);
            _ds.displaySimple(to, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string from;
        std::string to;
    };
    inline bool operator==(const SessionName&l, const SessionName&r)
    {
        return l.type == r.type && l.from == r.from && l.to == r.to;
    }
    inline bool operator!=(const SessionName&l, const SessionName&r)
    {
        return !(l == r);
    }

    struct SyncSessionStatusReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.SyncSessionStatusReq";
        }
        static string MD5()
        {
            return "57fc2794f0b9ef6959938790022f2571";
        }
        SyncSessionStatusReq()
        :read_seq_id(0),req_id(""),apns_unreadnum(-1)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(read_seq_id, 0);
            _os.write(session_name, 1);
            _os.write(req_id, 2);
            _os.write(apns_unreadnum, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(read_seq_id, 0, true);
            _is.read(session_name, 1, true);
            _is.read(req_id, 2, false);
            _is.read(apns_unreadnum, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(read_seq_id,"read_seq_id");
            _ds.display(session_name,"session_name");
            _ds.display(req_id,"req_id");
            _ds.display(apns_unreadnum,"apns_unreadnum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(read_seq_id, true);
            _ds.displaySimple(session_name, true);
            _ds.displaySimple(req_id, true);
            _ds.displaySimple(apns_unreadnum, false);
            return _os;
        }
    public:
        taf::Int64 read_seq_id;
        Toon::SessionName session_name;
        std::string req_id;
        taf::Int32 apns_unreadnum;
    };
    inline bool operator==(const SyncSessionStatusReq&l, const SyncSessionStatusReq&r)
    {
        return l.read_seq_id == r.read_seq_id && l.session_name == r.session_name && l.req_id == r.req_id && l.apns_unreadnum == r.apns_unreadnum;
    }
    inline bool operator!=(const SyncSessionStatusReq&l, const SyncSessionStatusReq&r)
    {
        return !(l == r);
    }

    struct SyncSessionStatusResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.SyncSessionStatusResp";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        SyncSessionStatusResp()
        :code(0),req_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(code, 0);
            _os.write(req_id, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(code, 0, true);
            _is.read(req_id, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(code,"code");
            _ds.display(req_id,"req_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(code, true);
            _ds.displaySimple(req_id, false);
            return _os;
        }
    public:
        taf::Int32 code;
        std::string req_id;
    };
    inline bool operator==(const SyncSessionStatusResp&l, const SyncSessionStatusResp&r)
    {
        return l.code == r.code && l.req_id == r.req_id;
    }
    inline bool operator!=(const SyncSessionStatusResp&l, const SyncSessionStatusResp&r)
    {
        return !(l == r);
    }

    struct HotSessionReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.HotSessionReq";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        HotSessionReq()
        :timestamp(0),req_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(timestamp, 1);
            _os.write(req_id, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(timestamp, 1, true);
            _is.read(req_id, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(timestamp,"timestamp");
            _ds.display(req_id,"req_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(req_id, false);
            return _os;
        }
    public:
        taf::Int64 timestamp;
        std::string req_id;
    };
    inline bool operator==(const HotSessionReq&l, const HotSessionReq&r)
    {
        return l.timestamp == r.timestamp && l.req_id == r.req_id;
    }
    inline bool operator!=(const HotSessionReq&l, const HotSessionReq&r)
    {
        return !(l == r);
    }

    struct HotSessionItem : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.HotSessionItem";
        }
        static string MD5()
        {
            return "fd5da9c4323c78c72fa8edf1ac155075";
        }
        HotSessionItem()
        :read_seq_id(0),unread_num(-1)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(read_seq_id, 0);
            _os.write(unread_num, 1);
            _os.write(normal_top_msg, 2);
            _os.write(priority_top_msg, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(read_seq_id, 0, true);
            _is.read(unread_num, 1, true);
            _is.read(normal_top_msg, 2, false);
            _is.read(priority_top_msg, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(read_seq_id,"read_seq_id");
            _ds.display(unread_num,"unread_num");
            _ds.display(normal_top_msg,"normal_top_msg");
            _ds.display(priority_top_msg,"priority_top_msg");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(read_seq_id, true);
            _ds.displaySimple(unread_num, true);
            _ds.displaySimple(normal_top_msg, true);
            _ds.displaySimple(priority_top_msg, false);
            return _os;
        }
    public:
        taf::Int64 read_seq_id;
        taf::Int32 unread_num;
        vector<Toon::OffMsgItem> normal_top_msg;
        vector<Toon::OffMsgItem> priority_top_msg;
    };
    inline bool operator==(const HotSessionItem&l, const HotSessionItem&r)
    {
        return l.read_seq_id == r.read_seq_id && l.unread_num == r.unread_num && l.normal_top_msg == r.normal_top_msg && l.priority_top_msg == r.priority_top_msg;
    }
    inline bool operator!=(const HotSessionItem&l, const HotSessionItem&r)
    {
        return !(l == r);
    }

    struct HotSessionResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.HotSessionResp";
        }
        static string MD5()
        {
            return "814f0cf05489b1145395bf5fa2b216a9";
        }
        HotSessionResp()
        :code(0),timestamp(0),req_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(code, 0);
            _os.write(timestamp, 1);
            _os.write(vSessionInfo, 2);
            _os.write(req_id, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(code, 0, true);
            _is.read(timestamp, 1, true);
            _is.read(vSessionInfo, 2, true);
            _is.read(req_id, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(code,"code");
            _ds.display(timestamp,"timestamp");
            _ds.display(vSessionInfo,"vSessionInfo");
            _ds.display(req_id,"req_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(code, true);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(vSessionInfo, true);
            _ds.displaySimple(req_id, false);
            return _os;
        }
    public:
        taf::Int32 code;
        taf::Int64 timestamp;
        vector<Toon::HotSessionItem> vSessionInfo;
        std::string req_id;
    };
    inline bool operator==(const HotSessionResp&l, const HotSessionResp&r)
    {
        return l.code == r.code && l.timestamp == r.timestamp && l.vSessionInfo == r.vSessionInfo && l.req_id == r.req_id;
    }
    inline bool operator!=(const HotSessionResp&l, const HotSessionResp&r)
    {
        return !(l == r);
    }

    struct PullOffMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.PullOffMsgReq";
        }
        static string MD5()
        {
            return "381a6b1b087e5b13f1812a742f7669d9";
        }
        PullOffMsgReq()
        :timestamp(0),up_seq_id(0),down_seq_id(0),limit_count(0),priority(0),req_id("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(timestamp, 0);
            _os.write(up_seq_id, 1);
            _os.write(down_seq_id, 2);
            _os.write(limit_count, 3);
            _os.write(session_name, 4);
            _os.write(priority, 5);
            _os.write(req_id, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(timestamp, 0, true);
            _is.read(up_seq_id, 1, true);
            _is.read(down_seq_id, 2, true);
            _is.read(limit_count, 3, true);
            _is.read(session_name, 4, true);
            _is.read(priority, 5, true);
            _is.read(req_id, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(timestamp,"timestamp");
            _ds.display(up_seq_id,"up_seq_id");
            _ds.display(down_seq_id,"down_seq_id");
            _ds.display(limit_count,"limit_count");
            _ds.display(session_name,"session_name");
            _ds.display(priority,"priority");
            _ds.display(req_id,"req_id");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(timestamp, true);
            _ds.displaySimple(up_seq_id, true);
            _ds.displaySimple(down_seq_id, true);
            _ds.displaySimple(limit_count, true);
            _ds.displaySimple(session_name, true);
            _ds.displaySimple(priority, true);
            _ds.displaySimple(req_id, false);
            return _os;
        }
    public:
        taf::Int64 timestamp;
        taf::Int64 up_seq_id;
        taf::Int64 down_seq_id;
        taf::Int32 limit_count;
        Toon::SessionName session_name;
        taf::Int32 priority;
        std::string req_id;
    };
    inline bool operator==(const PullOffMsgReq&l, const PullOffMsgReq&r)
    {
        return l.timestamp == r.timestamp && l.up_seq_id == r.up_seq_id && l.down_seq_id == r.down_seq_id && l.limit_count == r.limit_count && l.session_name == r.session_name && l.priority == r.priority && l.req_id == r.req_id;
    }
    inline bool operator!=(const PullOffMsgReq&l, const PullOffMsgReq&r)
    {
        return !(l == r);
    }

    struct ClientReport : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.ClientReport";
        }
        static string MD5()
        {
            return "26159cf77dcb9fe1c64b57dae580ccae";
        }
        ClientReport()
        :type(0),content("")
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(type, 0);
            _os.write(content, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(type, 0, true);
            _is.read(content, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(type,"type");
            _ds.display(content,"content");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(type, true);
            _ds.displaySimple(content, false);
            return _os;
        }
    public:
        taf::Int32 type;
        std::string content;
    };
    inline bool operator==(const ClientReport&l, const ClientReport&r)
    {
        return l.type == r.type && l.content == r.content;
    }
    inline bool operator!=(const ClientReport&l, const ClientReport&r)
    {
        return !(l == r);
    }

    struct SubOrganizeReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.SubOrganizeReq";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        SubOrganizeReq()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecOrganizeIDs, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(vecOrganizeIDs, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecOrganizeIDs,"vecOrganizeIDs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecOrganizeIDs, false);
            return _os;
        }
    public:
        vector<std::string> vecOrganizeIDs;
    };
    inline bool operator==(const SubOrganizeReq&l, const SubOrganizeReq&r)
    {
        return l.vecOrganizeIDs == r.vecOrganizeIDs;
    }
    inline bool operator!=(const SubOrganizeReq&l, const SubOrganizeReq&r)
    {
        return !(l == r);
    }

    struct ClientPresenceStatus : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.ClientPresenceStatus";
        }
        static string MD5()
        {
            return "57d3119bddcb35c305e8a07d152e047c";
        }
        ClientPresenceStatus()
        :client_id(""),nPresenceStatus(0)
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(client_id, 0);
            _os.write(nPresenceStatus, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(client_id, 0, true);
            _is.read(nPresenceStatus, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(client_id,"client_id");
            _ds.display(nPresenceStatus,"nPresenceStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(client_id, true);
            _ds.displaySimple(nPresenceStatus, false);
            return _os;
        }
    public:
        std::string client_id;
        taf::Char nPresenceStatus;
    };
    inline bool operator==(const ClientPresenceStatus&l, const ClientPresenceStatus&r)
    {
        return l.client_id == r.client_id && l.nPresenceStatus == r.nPresenceStatus;
    }
    inline bool operator!=(const ClientPresenceStatus&l, const ClientPresenceStatus&r)
    {
        return !(l == r);
    }

    struct NotifyPresenceStatusResp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "Toon.NotifyPresenceStatusResp";
        }
        static string MD5()
        {
            return "74523b91ae7a3ff200f52d3f2d2229c6";
        }
        NotifyPresenceStatusResp()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vecPresenceStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            _is.read(vecPresenceStatus, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vecPresenceStatus,"vecPresenceStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vecPresenceStatus, false);
            return _os;
        }
    public:
        vector<Toon::ClientPresenceStatus> vecPresenceStatus;
    };
    inline bool operator==(const NotifyPresenceStatusResp&l, const NotifyPresenceStatusResp&r)
    {
        return l.vecPresenceStatus == r.vecPresenceStatus;
    }
    inline bool operator!=(const NotifyPresenceStatusResp&l, const NotifyPresenceStatusResp&r)
    {
        return !(l == r);
    }


}

#define Toon_ConnectReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.client_id,b.client_id);jce_copy_struct(a.user_name,b.user_name);jce_copy_struct(a.password,b.password);jce_copy_struct(a.device_type,b.device_type);jce_copy_struct(a.deviceToken,b.deviceToken);jce_copy_struct(a.deviceId,b.deviceId);jce_copy_struct(a.app_type,b.app_type);jce_copy_struct(a.version,b.version);jce_copy_struct(a.toon_type,b.toon_type);jce_copy_struct(a.protocol_version,b.protocol_version);jce_copy_struct(a.push_service_type,b.push_service_type);

#define Toon_ConnectResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.code,b.code);jce_copy_struct(a.server_timeout,b.server_timeout);jce_copy_struct(a.vforbidden_content_type,b.vforbidden_content_type);jce_copy_struct(a.mToonTypeSwitch,b.mToonTypeSwitch);

#define Toon_KickOutReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.toon_type,b.toon_type);jce_copy_struct(a.device_type,b.device_type);

#define Toon_KickOutAck_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.code,b.code);

#define Toon_GroupReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msg_id,b.msg_id);jce_copy_struct(a.group_id,b.group_id);jce_copy_struct(a.client_ids,b.client_ids);

#define Toon_GroupResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msg_id,b.msg_id);jce_copy_struct(a.code,b.code);

#define Toon_MsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msg_id,b.msg_id);jce_copy_struct(a.seq_id,b.seq_id);jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.expire_time,b.expire_time);jce_copy_struct(a.from,b.from);jce_copy_struct(a.to,b.to);jce_copy_struct(a.to_client_id,b.to_client_id);jce_copy_struct(a.pushinfo,b.pushinfo);jce_copy_struct(a.content,b.content);jce_copy_struct(a.status,b.status);jce_copy_struct(a.priority,b.priority);jce_copy_struct(a.flags,b.flags);jce_copy_struct(a.from_client_id,b.from_client_id);jce_copy_struct(a.to_toon_type,b.to_toon_type);

#define Toon_MsgAck_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msg_id,b.msg_id);jce_copy_struct(a.seq_id,b.seq_id);jce_copy_struct(a.type,b.type);jce_copy_struct(a.from,b.from);jce_copy_struct(a.to,b.to);jce_copy_struct(a.priority,b.priority);jce_copy_struct(a.flags,b.flags);jce_copy_struct(a.retcode,b.retcode);jce_copy_struct(a.timestamp,b.timestamp);

#define Toon_OffMsgCountItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.count,b.count);jce_copy_struct(a.type,b.type);jce_copy_struct(a.seq_id,b.seq_id);jce_copy_struct(a.msgs,b.msgs);jce_copy_struct(a.seq_id_priority,b.seq_id_priority);

#define Toon_OffMsgCountResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msg_counts,b.msg_counts);jce_copy_struct(a.code,b.code);

#define Toon_OffMsgCountACK_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.acks,b.acks);

#define Toon_OffMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.seq_id,b.seq_id);jce_copy_struct(a.from,b.from);jce_copy_struct(a.to,b.to);jce_copy_struct(a.type,b.type);jce_copy_struct(a.count,b.count);jce_copy_struct(a.priority,b.priority);jce_copy_struct(a.req_id,b.req_id);

#define Toon_OffMsgItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.item,b.item);

#define Toon_OffMsgResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgs,b.msgs);jce_copy_struct(a.code,b.code);jce_copy_struct(a.req_id,b.req_id);

#define Toon_MonitorResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.broker_id,b.broker_id);jce_copy_struct(a.user_online,b.user_online);jce_copy_struct(a.send_msgs,b.send_msgs);jce_copy_struct(a.recv_msgs,b.recv_msgs);

#define Toon_SyncReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.client_id,b.client_id);jce_copy_struct(a.device_token,b.device_token);jce_copy_struct(a.apns_unreadnum,b.apns_unreadnum);

#define Toon_SyncResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.code,b.code);

#define Toon_SessionName_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.from,b.from);jce_copy_struct(a.to,b.to);

#define Toon_SyncSessionStatusReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.read_seq_id,b.read_seq_id);jce_copy_struct(a.session_name,b.session_name);jce_copy_struct(a.req_id,b.req_id);jce_copy_struct(a.apns_unreadnum,b.apns_unreadnum);

#define Toon_SyncSessionStatusResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.code,b.code);jce_copy_struct(a.req_id,b.req_id);

#define Toon_HotSessionReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.req_id,b.req_id);

#define Toon_HotSessionItem_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.read_seq_id,b.read_seq_id);jce_copy_struct(a.unread_num,b.unread_num);jce_copy_struct(a.normal_top_msg,b.normal_top_msg);jce_copy_struct(a.priority_top_msg,b.priority_top_msg);

#define Toon_HotSessionResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.code,b.code);jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.vSessionInfo,b.vSessionInfo);jce_copy_struct(a.req_id,b.req_id);

#define Toon_PullOffMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.timestamp,b.timestamp);jce_copy_struct(a.up_seq_id,b.up_seq_id);jce_copy_struct(a.down_seq_id,b.down_seq_id);jce_copy_struct(a.limit_count,b.limit_count);jce_copy_struct(a.session_name,b.session_name);jce_copy_struct(a.priority,b.priority);jce_copy_struct(a.req_id,b.req_id);

#define Toon_ClientReport_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.type,b.type);jce_copy_struct(a.content,b.content);

#define Toon_SubOrganizeReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecOrganizeIDs,b.vecOrganizeIDs);

#define Toon_ClientPresenceStatus_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.client_id,b.client_id);jce_copy_struct(a.nPresenceStatus,b.nPresenceStatus);

#define Toon_NotifyPresenceStatusResp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vecPresenceStatus,b.vecPresenceStatus);



#endif
